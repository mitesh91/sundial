---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: AWS::EC2::VPC::Id
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of an existing subnet IDs to use for the service instance auto
      scaling group
  ServiceInstanceType:
    Description: The EC2 job instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  DBName:
    Description: DB Name
    Type: String
    Default: sundial
  DBUsername:
    Description: DB Admin Username
    Type: String
    Default: sundial
  DBPassword:
    Description: DB Admin Password
    Type: String
  DBSubnetGroup:
    Description: DB VPC subnet group
    Type: String
  DBInstanceClass:
    Description: Database instance class
    Type: String
    Default: db.t2.small
    AllowedValues:
    - db.t2.micro
    - db.t2.small
    - db.t2.medium
    - db.t2.large
    - db.m4.large
    - db.m4.xlarge
    - db.m4.2xlarge
    - db.m4.4xlarge
    - db.m4.10xlarge
    - db.r3.large
    - db.r3.xlarge
    - db.r3.2xlarge
    - db.r3.4xlarge
    - db.r4.8xlarge
    ConstraintDescription: must select a valid database instance type.
  DBAllocatedStorage:
    Default: '15'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  SSHKey:
    Description: SSH key pair to associate with instances
    Type: AWS::EC2::KeyPair::KeyName
  HostedZoneName:
    Description: The DNS hosted zone name for Sundial web alias
    Type: String
  ELBScheme:
    Description: Have Sundial web interface web facing or only accessible from within
      VPC. Internet-facing recommended
    Type: String
    AllowedValues: ['internet-facing', 'internal']
  ELBSubnets:
    Description: Choose public subnets if internet facing, private subnets if internal
      only.
    Type: List<AWS::EC2::Subnet::Id>
  SSHAllowedCIDR:
    Description: IP address range from which SSHing into intances is allowed defined
      in CIDR format
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))"
    ConstraintDescription: Value must be valid CIDR notation
  BatchComputeEnvironmentName:
    Description: The name of the aws batch compute environment
    Type: String
    Default: sundial-compute-environment
  BatchJobQueueName:
    Description: The name of the aws batch job queue
    Type: String
    Default: sundial-job-queue
  BatchSpotInstanceBidPercentage:
    Description: The minimum percentage that a Spot Instance price must be when compared with the
      On-Demand price for that instance type before instances are launched. For example, if your
      bid percentage is 20%, then the Spot price must be below 20% of the current On-Demand price
      for that EC2 instance
    Type: Number
  BatchInstanceMaxvCpus:
    Description: The maximum number of EC2 vCPUs that an environment can reach
    Type: Number
    Default: 256
  BatchInstanceMinvCpus:
    Description: The minimum number of EC2 vCPUs that an environment should maintain
    Type: Number
    Default: 0
  BatchInstanceDesiredvCpus:
    Description: The desired number of EC2 vCPUS in the compute environment
    Type: Number

Mappings:
  AWSRegionToECSAMI:
    us-east-1:
      AMIID: ami-5253c32d
    us-west-2:
      AMIID: ami-d2f489aa
    eu-west-1:
      AMIID: ami-c91624b0
    ap-northeast-1:
      AMIID: ami-f3f8098c
    ap-southeast-2:
      AMIID: ami-bc04d5de
  AWSRegionToLinuxAMI:
    us-east-1:
      AMIID: ami-0080e4c5bc078760e
    us-west-2:
      AMIID: ami-0ec6517f6edbf8044
    eu-west-1:
      AMIID: ami-08935252a36e25f85
    ap-northeast-1:
      AMIID: ami-00a5245b4816c38e6
    ap-southeast-2:
      AMIID: ami-02fd0b06f06d93dfc
Resources:
  JobInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow SSH from anywhere
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHAllowedCIDR
      VpcId:
        Ref: VpcId
  JobInstanceEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: job-ecs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:CreateCluster
            - ecs:RegisterContainerInstance
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Submit*
            - ecs:Poll
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            Resource: "*"
      - PolicyName: job-sundial
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource:
            - arn:aws:logs:*:*:*
          - Sid: Stmt1431384914000
            Effect: Allow
            Action:
            - s3:*
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
          - Effect: Allow
            Action:
            - sdb:*
            Resource:
            - "*"
          - Sid: Stmt1434081804000
            Effect: Allow
            Action:
            - sdb:*
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability
            - ecr:GetAuthorizationToken
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            Resource: "*"
          - Effect: Allow
            Action:
            - sts:AssumeRole
            Resource: "*"
          - Effect: Allow
            Action:
            - iam:GetRole
            Resource: "*"
  JobInstanceEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: [!Ref JobInstanceEC2Role]
  ServiceInstanceConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        Setup:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
        CodeDeploy:
          commands:
            01_fetch_install_script:
              command: aws s3 cp s3://aws-codedeploy-us-east-1/latest/install /tmp/codedeploy_install --region us-east-1
            02_install_codedeploy:
              command: chmod +x /tmp/codedeploy_install && /tmp/codedeploy_install auto
          services:
            sysvinit:
              codedeploy-agent:
                enabled: 'true'
                ensureRunning: 'true'
        AWSLogs:
          packages:
            yum:
              awslogs: []
          files:
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                #
                # ------------------------------------------
                # CLOUDWATCH LOGS AGENT CONFIGURATION FILE
                # ------------------------------------------
                #
                # You can find logs for the agent in /var/log/awslogs.log
                #
                # ------------------------------------------
                # CONFIGURATION DETAILS
                # ------------------------------------------
                #
                # http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/AgentReference.html
                #

                [general]
                # Path to the CloudWatch Logs agent's state file. The agent uses this file to maintain
                # client side state across its executions.
                state_file = /var/lib/awslogs/agent-state

                # A batch is buffered for buffer-duration amount of time or 32KB of log events.
                # Defaults to 5000 ms and its minimum value is 5000 ms.
                buffer_duration = 5000

                # Use 'end_of_file' to start reading from the end of the file.
                # Use 'start_of_file' to start reading from the beginning of the file.
                initial_position = start_of_file

                # Encoding of file
                encoding = utf-8 # Other supported encodings include: ascii, latin-1

                # Supported DateTime formats:
                #   https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior

                [messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}
                log_group_name = sundial-messages

                #2015-01-07 17:05:10,713 - [INFO]

                [application]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/sundial/application.log
                log_stream_name = {instance_id}
                log_group_name = sundial-application

          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
        AWSCliUpgrade:
          commands:
            01_upgrade_aws_cli:
              command: pip install --upgrade awscli
        CfnHup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ServiceInstanceConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName}} --resource ServiceInstanceConfiguration --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        configSets:
          default: ['Setup', 'CfnHup', 'AWSCliUpgrade', 'CodeDeploy', 'AWSLogs']
    Properties:
      ImageId: !FindInMap ['AWSRegionToLinuxAMI', !Ref 'AWS::Region', 'AMIID']
      SecurityGroups: [!Ref ServiceInstanceSecurityGroup]
      InstanceType: !Ref ServiceInstanceType
      IamInstanceProfile: !Ref ServiceInstanceEC2InstanceProfile
      KeyName: !Ref SSHKey
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="=======6t461261365=="
            MIME-Version: 1.0

            --=======6t461261365==
            Content-Type: text/cloud-config

            users:
            - default
            - name: sundial
              gecos: Sundial User
              sudo: ALL=(ALL) NOPASSWD:ALL

            --=======6t461261365==
            Content-Type: text/x-shellscript; charset="us-ascii"
            Content-Disposition: attachment; filename="cfn-setup.sh"

            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ServiceInstanceConfiguration --region us-east-1
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ServiceInstanceAutoScalingGroup --region us-east-1

            --=======6t461261365==--
  ServiceInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for service instances
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHAllowedCIDR
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        SourceSecurityGroupId: !GetAtt ['ServiceInstanceELBSecurityGroup', 'GroupId']
      VpcId: !Ref VpcId
  ServiceInstanceELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for the service ELB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId: !GetAtt ['JobInstanceSecurityGroup', 'GroupId']
      VpcId: !Ref VpcId
  ServiceInstanceELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets: !Ref ELBSubnets
      SecurityGroups: [!Ref ServiceInstanceELBSecurityGroup]
      Scheme: !Ref ELBScheme
      HealthCheck:
        HealthyThreshold: 2
        Interval: 10
        Target: TCP:9000
        Timeout: 5
        UnhealthyThreshold: 2
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: '9000'
        Protocol: HTTP
  ServiceInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetID
      LaunchConfigurationName: !Ref ServiceInstanceConfiguration
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      LoadBalancerNames: [!Ref ServiceInstanceELB]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '0'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'false'
  ServiceInstanceEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ['ec2.amazonaws.com']
          Action: ['sts:AssumeRole']
      Path: "/"
      Policies:
      - PolicyName: sundial-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['batch:*']
            Resource: ["*"]
          - Effect: Allow
            Action: ['iam:passRole']
            Resource: ["*"]
          - Effect: Allow
            Action: ['ecs:*']
            Resource: ["*"]
          - Effect: Allow
            Action: ['s3:*']
            Resource: ["*"]
          - Effect: Allow
            Action: ['ec2:*']
            Resource: ["*"]
          - Effect: Allow
            Action:
            - autoscaling:DescribeAutoScalingInstances
            - autoscaling:DescribeTags
            Resource: ["*"]
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            Resource: "*"
          - Effect: Allow
            Action: ['logs:*']
            Resource: ["*"]
          - Effect: Allow
            Action: ['ses:*']
            Resource: ['*']
          - Effect: Allow
            Action: ['sdb:*']
            Resource: ["*"]
          - Effect: Allow
            Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability
            - ecr:GetAuthorizationToken
            Resource: ["*"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess
  ServiceInstanceEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: [!Ref ServiceInstanceEC2Role]
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - codedeploy.us-east-1.amazonaws.com
            - codedeploy.us-west-2.amazonaws.com
            - codedeploy.eu-west-1.amazonaws.com
            - codedeploy.ap-southeast-2.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: codedeploy-service-role-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - autoscaling:CompleteLifecycleAction
            - autoscaling:DeleteLifecycleHook
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:DescribeLifecycleHooks
            - autoscaling:PutLifecycleHook
            - autoscaling:RecordLifecycleActionHeartbeat
            - ec2:DescribeInstances
            - ec2:DescribeInstanceStatus
            - tag:GetTags
            - tag:GetResources
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability
            - ecr:GetAuthorizationToken
            Resource: "*"
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: [!GetAtt ['DBSecurityGroup', 'GroupId']]
      AllocatedStorage: !Ref DBAllocatedStorage
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !GetAtt ['ServiceInstanceSecurityGroup', 'GroupId']
      GroupDescription: for database instances
      VpcId: !Ref VpcId
  DNSEntry:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Sub sundial.${HostedZoneName}
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ['ServiceInstanceELB', 'CanonicalHostedZoneNameID']
        DNSName: !GetAtt ['ServiceInstanceELB', 'DNSName']
  CodedeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: Sundial
  CodedeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: Sundial
      AutoScalingGroups:
      - Ref: ServiceInstanceAutoScalingGroup
      DeploymentGroupName: SundialProd
      ServiceRoleArn: !GetAtt ['CodeDeployServiceRole', 'Arn']
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
        - ExpirationInDays: 30
          Status: Enabled
          Prefix: logs/
        - ExpirationInDays: 30
          Status: Enabled
          Prefix: email-images/
        - ExpirationInDays: 30
          Status: Enabled
          Prefix: agent-config/
  SimpleDBDomain:
    Type: AWS::SDB::Domain
    Properties:
      Description: Store metadata information
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: batch.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: batch-service-role-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeAccountAttributes
            - ec2:DescribeInstances
            - ec2:DescribeSubnets
            - ec2:DescribeSecurityGroups
            - ec2:DescribeKeyPairs
            - ec2:DescribeImages
            - ec2:DescribeImageAttribute
            - ec2:DescribeSpotFleetInstances
            - ec2:DescribeSpotFleetRequests
            - ec2:DescribeSpotPriceHistory
            - ec2:RequestSpotFleet
            - ec2:CancelSpotFleetRequests
            - ec2:ModifySpotFleetRequest
            - ec2:TerminateInstances
            - autoscaling:DescribeAccountLimits
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:DescribeLaunchConfigurations
            - autoscaling:DescribeAutoScalingInstances
            - autoscaling:CreateLaunchConfiguration
            - autoscaling:CreateAutoScalingGroup
            - autoscaling:UpdateAutoScalingGroup
            - autoscaling:SetDesiredCapacity
            - autoscaling:DeleteLaunchConfiguration
            - autoscaling:DeleteAutoScalingGroup
            - autoscaling:CreateOrUpdateTags
            - autoscaling:SuspendProcesses
            - autoscaling:PutNotificationConfiguration
            - autoscaling:TerminateInstanceInAutoScalingGroup
            - ecs:DescribeClusters
            - ecs:DescribeContainerInstances
            - ecs:DescribeTaskDefinition
            - ecs:DescribeTasks
            - ecs:ListClusters
            - ecs:ListContainerInstances
            - ecs:ListTaskDefinitionFamilies
            - ecs:ListTaskDefinitions
            - ecs:ListTasks
            - ecs:CreateCluster
            - ecs:DeleteCluster
            - ecs:RegisterTaskDefinition
            - ecs:DeregisterTaskDefinition
            - ecs:RunTask
            - ecs:StartTask
            - ecs:StopTask
            - ecs:UpdateContainerAgent
            - ecs:DeregisterContainerInstance
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - iam:GetInstanceProfile
            - iam:PassRole
            Resource: ["*"]
  BatchSpotIamFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: "spotfleet.amazonaws.com"
          Action: sts:AssumeRole
      Policies:
      - PolicyName: batch-spot-iam-fleet-role-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            - ec2:DescribeSubnets
            - ec2:RequestSpotInstances
            - ec2:TerminateInstances
            - ec2:DescribeInstanceStatus
            - iam:PassRole
            Resource: ["*"]
  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole: !Ref BatchServiceRole
      ComputeEnvironmentName: !Ref BatchComputeEnvironmentName
      ComputeResources:
        SpotIamFleetRole: !Ref BatchSpotIamFleetRole
        SecurityGroupIds: [!Ref JobInstanceSecurityGroup]
        Subnets: !Ref SubnetID
        Type: EC2
        ImageId: !FindInMap ['AWSRegionToECSAMI', !Ref 'AWS::Region', 'AMIID']
        InstanceRole: !Ref JobInstanceEC2InstanceProfile
        InstanceTypes: [optimal]
        Ec2KeyPair: !Ref SSHKey
        BidPercentage: !Ref BatchSpotInstanceBidPercentage
        MaxvCpus: !Ref BatchInstanceMaxvCpus
        MinvCpus: !Ref BatchInstanceMinvCpus
        DesiredvCpus: !Ref BatchInstanceDesiredvCpus
  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Ref BatchJobQueueName
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
Outputs:
  DBInstanceEndpoint:
    Value: !GetAtt ['DBInstance', 'Endpoint.Address']
  WebAddress:
    Value: !Ref DNSEntry
