/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.0.1
 * apibuilder 0.14.59 app.apibuilder.io/speedwing/pagerduty-api/0.0.1/play_2_6_client
 */
package speedwing.pagerduty.api.v0.models {

  final case class CreateEvent(
    serviceKey: String,
    eventType: speedwing.pagerduty.api.v0.models.EventType,
    incidentKey: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    details: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    client: _root_.scala.Option[String] = None,
    clientUrl: _root_.scala.Option[String] = None,
    contexts: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None
  )

  final case class Result(
    status: String,
    message: String,
    incidentKey: String
  )

  sealed trait EventType extends _root_.scala.Product with _root_.scala.Serializable

  object EventType {

    case object Trigger extends EventType { override def toString = "trigger" }
    case object Acknowledge extends EventType { override def toString = "acknowledge" }
    case object Resolve extends EventType { override def toString = "resolve" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends EventType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[EventType] = scala.List(Trigger, Acknowledge, Resolve)

    private[this]
    val byName: Map[String, EventType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): EventType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[EventType] = byName.get(value.toLowerCase)

  }

}

package speedwing.pagerduty.api.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import speedwing.pagerduty.api.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsPagerdutyApiEventType = new play.api.libs.json.Reads[speedwing.pagerduty.api.v0.models.EventType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[speedwing.pagerduty.api.v0.models.EventType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(speedwing.pagerduty.api.v0.models.EventType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(speedwing.pagerduty.api.v0.models.EventType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesPagerdutyApiEventType(obj: speedwing.pagerduty.api.v0.models.EventType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectEventType(obj: speedwing.pagerduty.api.v0.models.EventType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesPagerdutyApiEventType: play.api.libs.json.Writes[EventType] = {
      new play.api.libs.json.Writes[speedwing.pagerduty.api.v0.models.EventType] {
        def writes(obj: speedwing.pagerduty.api.v0.models.EventType) = {
          jsonWritesPagerdutyApiEventType(obj)
        }
      }
    }

    implicit def jsonReadsPagerdutyApiCreateEvent: play.api.libs.json.Reads[CreateEvent] = {
      for {
        serviceKey <- (__ \ "service_key").read[String]
        eventType <- (__ \ "event_type").read[speedwing.pagerduty.api.v0.models.EventType]
        incidentKey <- (__ \ "incident_key").readNullable[String]
        description <- (__ \ "description").readNullable[String]
        details <- (__ \ "details").readNullable[_root_.play.api.libs.json.JsObject]
        client <- (__ \ "client").readNullable[String]
        clientUrl <- (__ \ "client_url").readNullable[String]
        contexts <- (__ \ "contexts").readNullable[_root_.play.api.libs.json.JsObject]
      } yield CreateEvent(serviceKey, eventType, incidentKey, description, details, client, clientUrl, contexts)
    }

    def jsObjectCreateEvent(obj: speedwing.pagerduty.api.v0.models.CreateEvent): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "service_key" -> play.api.libs.json.JsString(obj.serviceKey),
        "event_type" -> play.api.libs.json.JsString(obj.eventType.toString)
      ) ++ (obj.incidentKey match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("incident_key" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.details match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("details" -> x)
      }) ++
      (obj.client match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("client" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.clientUrl match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("client_url" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.contexts match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("contexts" -> x)
      })
    }

    implicit def jsonWritesPagerdutyApiCreateEvent: play.api.libs.json.Writes[CreateEvent] = {
      new play.api.libs.json.Writes[speedwing.pagerduty.api.v0.models.CreateEvent] {
        def writes(obj: speedwing.pagerduty.api.v0.models.CreateEvent) = {
          jsObjectCreateEvent(obj)
        }
      }
    }

    implicit def jsonReadsPagerdutyApiResult: play.api.libs.json.Reads[Result] = {
      for {
        status <- (__ \ "status").read[String]
        message <- (__ \ "message").read[String]
        incidentKey <- (__ \ "incident_key").read[String]
      } yield Result(status, message, incidentKey)
    }

    def jsObjectResult(obj: speedwing.pagerduty.api.v0.models.Result): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status),
        "message" -> play.api.libs.json.JsString(obj.message),
        "incident_key" -> play.api.libs.json.JsString(obj.incidentKey)
      )
    }

    implicit def jsonWritesPagerdutyApiResult: play.api.libs.json.Writes[Result] = {
      new play.api.libs.json.Writes[speedwing.pagerduty.api.v0.models.Result] {
        def writes(obj: speedwing.pagerduty.api.v0.models.Result) = {
          jsObjectResult(obj)
        }
      }
    }
  }
}

package speedwing.pagerduty.api.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import speedwing.pagerduty.api.v0.models._

      val eventTypeConverter: ApibuilderTypeConverter[speedwing.pagerduty.api.v0.models.EventType] = new ApibuilderTypeConverter[speedwing.pagerduty.api.v0.models.EventType] {
        override def convert(value: String): speedwing.pagerduty.api.v0.models.EventType = speedwing.pagerduty.api.v0.models.EventType(value)
        override def convert(value: speedwing.pagerduty.api.v0.models.EventType): String = value.toString
        override def example: speedwing.pagerduty.api.v0.models.EventType = speedwing.pagerduty.api.v0.models.EventType.Trigger
        override def validValues: Seq[speedwing.pagerduty.api.v0.models.EventType] = speedwing.pagerduty.api.v0.models.EventType.all
      }
      implicit def pathBindableEventType(implicit stringBinder: QueryStringBindable[String]): PathBindable[speedwing.pagerduty.api.v0.models.EventType] = ApibuilderPathBindable(eventTypeConverter)
      implicit def queryStringBindableEventType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[speedwing.pagerduty.api.v0.models.EventType] = ApibuilderQueryStringBindable(eventTypeConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      import org.joda.time.{format, DateTime, LocalDate}

      val dateTimeIso8601: ApibuilderTypeConverter[DateTime] = new ApibuilderTypeConverter[DateTime] {
        override def convert(value: String): DateTime = format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: DateTime): String = format.ISODateTimeFormat.dateTime.print(value)
        override def example: DateTime = DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[LocalDate] = new ApibuilderTypeConverter[LocalDate] {
        override def convert(value: String): LocalDate = format.ISODateTimeFormat.yearMonthDay.parseLocalDate(value)
        override def convert(value: LocalDate): String = value.toString
        override def example: LocalDate = LocalDate.now
      }

    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package speedwing.pagerduty.api.v0 {

  object Constants {

    val BaseUrl = "https://events.pagerduty.com"
    val Namespace = "speedwing.pagerduty.api.v0"
    val UserAgent = "apibuilder 0.14.59 app.apibuilder.io/speedwing/pagerduty-api/0.0.1/play_2_6_client"
    val Version = "0.0.1"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String = "https://events.pagerduty.com",
    auth: scala.Option[speedwing.pagerduty.api.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import speedwing.pagerduty.api.v0.models.json._

    private[this] val logger = play.api.Logger("speedwing.pagerduty.api.v0.Client")

    logger.info(s"Initializing speedwing.pagerduty.api.v0.Client for url $baseUrl")

    def createEvents: CreateEvents = CreateEvents

    object CreateEvents extends CreateEvents {
      override def post(
        createEvent: speedwing.pagerduty.api.v0.models.CreateEvent,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[speedwing.pagerduty.api.v0.models.Result] = {
        val payload = play.api.libs.json.Json.toJson(createEvent)

        _executeRequest("POST", s"/generic/2010-04-15/create_event.json", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.speedwing.pagerduty.api.v0.Client.parseJson("speedwing.pagerduty.api.v0.models.Result", r, _.validate[speedwing.pagerduty.api.v0.models.Result])
          case r => throw speedwing.pagerduty.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw speedwing.pagerduty.api.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def createEvents: speedwing.pagerduty.api.v0.CreateEvents
    }

  }

  trait CreateEvents {
    /**
     * Create an alert on Pagerduty
     */
    def post(
      createEvent: speedwing.pagerduty.api.v0.models.CreateEvent,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[speedwing.pagerduty.api.v0.models.Result]
  }

  package errors {

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}